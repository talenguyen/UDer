// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'

        // APT compile-time annotation processing
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'

        // Backport of some Java 8 language features such as Lambdas and method references.
        classpath 'me.tatarka:gradle-retrolambda:3.2.4'

        // Workaround for Lint + Retrolambda.
        classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }

    // Part of workaround for Lint + Retrolambda.
    configurations.classpath.exclude group: 'com.android.tools.external.lombok'
}

allprojects {
    repositories {
        jcenter()
    }

    // Workaround to prevent Gradle from stealing focus from other apps during tests run/etc.
    // https://gist.github.com/artem-zinnatullin/4c250e04636e25797165
    tasks.withType(JavaForkOptions) {
        jvmArgs '-Djava.awt.headless=true'
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext.preDexLibs = !project.hasProperty('disablePreDex')

ext.versions = [
        code              : 1,
        name              : '1.0',

        minSdk            : 16,
        targetSdk         : 23,
        compileSdk        : 23,
        buildTools        : '23.0.2',

        dagger            : '2.0.2',
        javaxInject       : '1',
        javaxAnnotationApi: '1.2',
        rxJava            : '1.1.0',
        rxAndroid         : '1.1.0',
        supportLibs       : '23.1.1',
        okHttp            : '2.7.0',
        retrofit          : '2.0.0-beta2',
        jackson           : '2.6.3',
        autoValue         : '1.1',
        butterKnife       : '7.0.1',
        timber            : '4.1.0',
        espresso          : '2.2.1',
        stetho            : '1.2.0',
        leakCanary        : '1.3.1',
        tinyDancer        : '0.0.8',

        junit             : '4.12',
        robolectric       : '3.0',
        assertJ           : '1.7.1',
        equalsVerifier    : '1.7.5',
        mockito           : '1.10.19',
        supportTestRunner : '0.4.1',
        playServices      : '8.4.0',
]

ext.libraries = [
        dagger                  : "com.google.dagger:dagger:$versions.dagger",
        daggerCompiler          : "com.google.dagger:dagger-compiler:$versions.dagger",
        javaxInject             : "javax.inject:javax.inject:$versions.javaxInject",
        javaxAnnotationApi      : "javax.annotation:javax.annotation-api:$versions.javaxAnnotationApi",

        rxJava                  : "io.reactivex:rxjava:$versions.rxJava",
        rxAndroid               : "io.reactivex:rxandroid:$versions.rxAndroid",

        okHttp                  : "com.squareup.okhttp:okhttp:$versions.okHttp",
        okHttpLoggingInterceptor: "com.squareup.okhttp:logging-interceptor:$versions.okHttp",
        retrofit                : "com.squareup.retrofit:retrofit:$versions.retrofit",
        retrofitJacksonConverter: "com.squareup.retrofit:converter-jackson:$versions.retrofit",
        retrofitRxJavaAdapter   : "com.squareup.retrofit:adapter-rxjava:$versions.retrofit",
        jacksonDataBind         : "com.fasterxml.jackson.core:jackson-databind:$versions.jackson",

        autoValue               : "com.google.auto.value:auto-value:$versions.autoValue",

        supportAnnotations      : "com.android.support:support-annotations:$versions.supportLibs",
        supportAppCompat        : "com.android.support:appcompat-v7:$versions.supportLibs",
        supportDesign           : "com.android.support:design:$versions.supportLibs",
        supportRecyclerView     : "com.android.support:recyclerview-v7:$versions.supportLibs",
        supportCardView         : "com.android.support:cardview-v7:$versions.supportLibs",

        butterKnife             : "com.jakewharton:butterknife:$versions.butterKnife",
        timber                  : "com.jakewharton.timber:timber:$versions.timber",

        playServicesMaps        : "com.google.android.gms:play-services-maps:$versions.playServices",
        playServicesLocation    : "com.google.android.gms:play-services-location:$versions.playServices",

        // Developer Tools
        stetho                  : "com.facebook.stetho:stetho:$versions.stetho",
        stethoOkHttp            : "com.facebook.stetho:stetho-okhttp:$versions.stetho",
        leakCanary              : "com.squareup.leakcanary:leakcanary-android:$versions.leakCanary",
        tinyDancer              : "com.github.brianPlummer:tinydancer:$versions.tinyDancer",

        // Test dependencies
        junit                   : "junit:junit:$versions.junit",
        robolectric             : "org.robolectric:robolectric:$versions.robolectric",
        assertJ                 : "org.assertj:assertj-core:$versions.assertJ",
        equalsVerifier          : "nl.jqno.equalsverifier:equalsverifier:$versions.equalsVerifier",
        okHttpMockWebServer     : "com.squareup.okhttp:mockwebserver:$versions.okHttp",
        mockitoCore             : "org.mockito:mockito-core:$versions.mockito",
        supportTestRunner       : "com.android.support.test:runner:$versions.supportTestRunner",
        supportTestRules        : "com.android.support.test:rules:$versions.supportTestRunner",
        espressoCore            : "com.android.support.test.espresso:espresso-core:$versions.espresso",
        espressoContrib         : "com.android.support.test.espresso:espresso-contrib:$versions.espresso",
        espressoIntents         : "com.android.support.test.espresso:espresso-intents:$versions.espresso",
]

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name) || 'com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
            // enable or disable pre-dexing
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    plugins.apply('pmd')

    pmd {
        toolVersion = '5.4.0'
    }

    task pmd(type: Pmd) {
        ignoreFailures = false // Fail early.
        ruleSetFiles = project.files(rootProject.file("code_quality_tools/pmd.xml"))
        ruleSets = []

        source = fileTree('src/main/java')
    }

    plugins.apply('findbugs')

    task findbugs(type: FindBugs) {
        ignoreFailures = false // Fail early.
        effort = 'max'
        reportLevel = 'low' // Report even low priority problems.

        classes = files("${project.projectDir}/build/intermediates/classes")
        source = fileTree('src/main/java')

        // If somebody has an idea how to make this work with support libraries -> open a PR please.
        classpath = files()

        excludeFilter = rootProject.file('code_quality_tools/findbugs-filter.xml')
    }

    plugins.apply('checkstyle')

    task checkstyle(type: Checkstyle) {
        configFile rootProject.file('code_quality_tools/checkstyle.xml')

        ignoreFailures false // Fail early.
        showViolations true

        source 'src'
        include '**/*.java'

        classpath = files()
    }

    afterEvaluate {
        tasks.findByName('pmd').dependsOn('assemble')
        tasks.findByName('findbugs').dependsOn('assemble')

        def checkTask = tasks.findByName('check')

        checkTask.dependsOn('pmd')
        checkTask.dependsOn('findbugs')
        checkTask.dependsOn('checkstyle')

        // Log instrumentation tests results.
        tasks.withType(com.android.build.gradle.internal.tasks.AndroidTestTask) { task ->
            task.doFirst {
                logging.level = LogLevel.INFO
            }
            task.doLast {
                logging.level = LogLevel.LIFECYCLE
            }
        }
    }
}
