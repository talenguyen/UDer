apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply from: '../code_quality_tools/jacoco.gradle'

def getGitSha() {
  return 'git rev-parse --short HEAD'.execute().text.trim()
}

def getBuildDateForDebugBuild() {
  // To prevent frequent breaking of incremental compilation we don't put minutes and seconds in debug builds.
  return new Date().format("dd-MM-yyyy HH:00:00 z", TimeZone.getTimeZone("UTC"))
}

def getBuildDateForReleaseBuild() {
  return new Date().format("dd-MM-yyyy HH:mm:ss z", TimeZone.getTimeZone("UTC"))
}

android {
  // See build.gradle in the root of the project
  compileSdkVersion versions.compileSdk
  buildToolsVersion versions.buildTools

  defaultConfig {
    applicationId 'com.tale.uder'
    minSdkVersion versions.minSdk
    targetSdkVersion versions.targetSdk
    versionCode versions.code
    // Notice that you may want to use BUILD_NUMBER from CI in real project with own CI.
    versionName versions.name

    // Notice that each change of git sha will require recompilation of the BuildConfig class (which can cause full assemble task run).
    buildConfigField 'String', 'GIT_SHA', "\"${getGitSha()}\""

    // Notice that we have custom Instrumentation test runner to change application class (to mock dependencies)!
    testInstrumentationRunner 'com.tale.uder.UderFunctionalTestsRunner'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  signingConfigs {
    release {
      storeFile file('keystore.jks')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.release
      buildConfigField 'String', 'BUILD_DATE', "\"${getBuildDateForDebugBuild()}\""
    }

    release {
      signingConfig signingConfigs.release
      buildConfigField 'String', 'BUILD_DATE', "\"${getBuildDateForReleaseBuild()}\""

      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt')
    }
  }

  sourceSets {
    // Common code for JVM tests lives in src/jvmTestsCommon.
    test.java.srcDir 'src/jvmTestsCommon/java'

    // Unit tests live in src/unitTest.
    test.java.srcDir 'src/unitTests/java'

    // Integration tests live in src/integrationTest.
    test.java.srcDir 'src/integrationTests/java'

    // Unit tests for debug build type specific code live in src/debugUnitTest.
    testDebug.java.srcDir 'src/debugUnitTests/java'

    // Unit tests for release build type specific code live in src/releaseUnitTest.
    testRelease.java.srcDir 'src/releaseUnitTests/java'

    // Functional tests live in src/functionalTests.
    androidTest.java.srcDir 'src/functionalTests/java'
  }

  lintOptions {
    warningsAsErrors true
    abortOnError true // Fail early.

    disable 'GoogleAppIndexingWarning' // App does not have deep linking.
    disable 'InvalidPackage' // Okio references java.nio that does not presented in Android SDK.
  }

  packagingOptions {
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  // This allows us see tests execution progress in the output on the CI.
  testOptions.unitTests.all {
    testLogging {
      events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
      exceptionFormat 'full'
    }
  }
}

// Libraries declared in build.gradle in the root of the project
dependencies {
  compile libraries.dagger
  apt libraries.daggerCompiler
  compile libraries.javaxInject
  compile libraries.javaxAnnotationApi

  compile libraries.rxJava

  compile libraries.okHttp
  compile libraries.okHttpLoggingInterceptor
  compile libraries.retrofit
  compile libraries.retrofitJacksonConverter
  compile libraries.retrofitRxJavaAdapter
  compile libraries.jacksonDataBind

  compile libraries.autoValue

  compile libraries.supportAnnotations
  compile libraries.supportAppCompat
  compile libraries.supportDesign
  compile libraries.supportRecyclerView
  compile libraries.supportCardView

  compile libraries.butterKnife
  compile libraries.timber

  // Developer tools (Developer Settings)
  debugCompile libraries.stetho
  debugCompile libraries.stethoOkHttp
  debugCompile libraries.leakCanary
  debugCompile libraries.tinyDancer

  testCompile libraries.junit
  testCompile libraries.robolectric
  testCompile libraries.assertJ
  testCompile libraries.equalsVerifier
  testCompile libraries.okHttpMockWebServer
  testCompile libraries.mockitoCore

  androidTestCompile libraries.supportTestRunner
  androidTestCompile libraries.supportTestRules
  androidTestCompile libraries.espressoCore
  androidTestCompile(libraries.espressoContrib) {
    // Causes IncompatibleClassChangeError. As alwaysâ€¦
    exclude module: 'support-annotations'
    exclude module: 'recyclerview-v7'
    exclude module: 'support-v4'
  }
  androidTestCompile libraries.okHttpMockWebServer
}

configurations.all {
  resolutionStrategy {
    // Force our version of support-annotations, we have a conflict between app and androidTest dependency resolution.
    force libraries.supportAnnotations
  }
}
